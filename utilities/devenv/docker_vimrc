"
"
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing in insert mode --------------
set backspace=indent,eol,start

set undofile
" backup and swap files not needed inside docker containers
set nobackup
set noswapfile

" Enable Mouse -----------------------------------
if has('mouse')
  set mouse=a
endif
" ------------------------------------------------

" Switch syntax highlighting on ------------------
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif
" ------------------------------------------------

" General settings -------------------------------
set history=200		   " keep 200 lines of command line history
set incsearch	   	   " do incremental searching
set ignorecase
set smartcase
set scrolloff=4        " 4 lines buffer for scroll
set hidden             " allow buffers to be open in background
set noshowmode         " hide default status line
set nonu               " hide linenumber column
set encoding=utf8
set showcmd
set tabstop=4
set softtabstop=4
set expandtab
set shiftwidth=4
filetype plugin on     " update for nerdcommenter plugin

set completeopt=menuone,noinsert,noselect
set list listchars=trail:·,nbsp:·,tab:\ \ 

set signcolumn=yes     " enable sign col to be always enabled
set updatetime=250

" so that files dont leak to host system when mounted
set undodir^=$HOME/.vim/undo//

" markdown fenced code syntax highlighting
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'css', 'javascript', 'js=javascript', 'json=javascript', 'cpp']
" ------------------------------------------------

" Python related settings ------------------------
" braceless settings
autocmd FileType python BracelessEnable +indent
" ------------------------------------------------

" Colorscheme ------------------------------------
set term=screen-256color " Enable 256 color schemes
set t_Co=256
colorscheme luna-term
highlight normal ctermbg=none
highlight NonText ctermbg=none
highlight todo ctermbg=233 ctermfg=208
" ------------------------------------------------

" add colorcolumn at 80 chars for python PEP8 ----
setlocal textwidth=80
set cc=80
hi ColorColumn ctermbg=233
" ------------------------------------------------

" statusline--------------------------
set laststatus=2

let g:currentmode={
    \ 'n'  : 'N',
    \ 'v'  : 'V',
    \ 'V'  : 'V·LINE',
    \ '' : 'V·BLOCK',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'Rv' : 'V·REPLACE',
    \ 'c'  : 'Command',
    \ 's'  : 'Select',
    \ 'S'  : 'S·Line',
    \ 'C-s': 'S·Block',
    \ 'no' : 'N·Operator Pending',
    \ 'cv' : 'Vim Ex',
    \ 'ce' : 'Ex',
    \ 'r'  : 'Prompt',
    \ 'rm' : 'More',
    \ 'r?' : 'Confirm',
    \ '!'  : 'Shell',
    \ 't'  : 'Terminal'
\}

function FileSize()
	let l:size = getfsize(expand('%'))
	if l:size == 0 || l:size == -1 || l:size == -2
		return ''
	endif
	if l:size < 1024
		return l:size.' bytes'
	elseif l:size < 1024*1024
		return printf('%.1f', l:size/1024.0).'kb'
	elseif l:size < 1024*1024*1024
		return printf('%.1f', l:size/1024.0/1024.0) . 'mb'
	else
		return printf('%.1f', l:size/1024.0/1024.0/1024.0) . 'gb'
	endif
endfunction

function StatusModeColor()
    if (mode() =~# '[vV]')
        return '%#StatusLineVisual#'
    elseif (mode() =~# 'n.*')
        return '%#StatusLineNormal#'
    elseif (mode() =~# 'i.*')
        return '%#StatusLineInsert#'
    elseif (mode() =~# 'R.*')
        return '%#StatusLineReplace#'
    else
        return '%#StatusLineDefault#'
    endif
endfunction

highlight StatusLine ctermfg=85 ctermbg=235
highlight StatusLineFlag ctermfg=216 ctermbg=235
highlight StatusLineRedFlag ctermfg=210 ctermbg=235
highlight StatusLineNC ctermfg=239 ctermbg=235
highlight StatusLineNCMid ctermfg=241 ctermbg=236
highlight StatusLineNCLight ctermfg=233 ctermbg=237
highlight StatusLineDefault ctermfg=210 ctermbg=233
highlight StatusLineNormal ctermfg=16 ctermbg=76
highlight StatusLineInsert ctermfg=17 ctermbg=45
highlight StatusLineVisual ctermfg=232 ctermbg=214
highlight StatusLineReplace ctermfg=96 ctermbg=116
highlight StatusLineMid ctermfg=255 ctermbg=238

function StatusLineGen(mode)
    let l:line = ''

    if a:mode ==# 'active'
        if &filetype ==# 'help' || &filetype ==# 'man'
            let l:line.= '%#StatusLineNormal#'
            let l:line.= ' %{toupper(&filetype)} '
            let l:line.= '%* %f %r%w'
            let l:line .= '%='
            let l:line.=' %#StatusLineNormal#'
            let l:line .= ' %03l:%03c[%p%%] '
            return l:line
        endif

        let l:line .= StatusModeColor()
        let l:line .= ' %{g:currentmode[mode()]} %*'
        let l:line .= '%#StatusLineMid# %*'
        let l:line .= '%#StatusLineFlag#'
        let l:line .= ' %n:%* %f '
        let l:line .= &modified ? '%#StatusLineRedFlag#%m%*' : ''
        let l:line .= '%#StatusLineFlag#'
        let l:line .= '%r%h%w'
        let l:line .= &paste? '[PASTE]' : ''
        let l:line .= '%*'

        let l:line .= '%='

        let l:line .= ' %Y | %{FileSize()} '
        let l:line .= '%#StatusLineMid# %*'
        let l:line .= StatusModeColor()
        let l:line .= ' %03l:%03c '
    else
        let l:line .= '%#StatusLineNC#'
        let l:line .= ' %f '
        let l:line .= &modified ? '%m' : ''
        let l:line .= '%r%h%w'
        let l:line .= '%='
        let l:line .= ' %Y | %{FileSize()} '
        let l:line .= '%#StatusLineNCMid# %*'
        let l:line .= '%#StatusLineNCLight#'
        let l:line .= ' %03l:%03c '
    endif

    let l:line .= '%*'
    return l:line
endfunction

set statusline=%!StatusLineGen('active')
augroup CustomStatusLine
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setl statusline=%!StatusLineGen('active')
    autocmd VimLeave,WinLeave,BufWinLeave * setl statusline=%!StatusLineGen('inactive')
augroup END
" -------------------------------------------------

" nerdcommenter -----------------------------------
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
" -------------------------------------------------

" Keymappings ------------------------------------
" Disable Arrow keys in Normal mode
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Disable Arrow keys in Insert mode
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" tab and shift-tab to do multiple indents for visual groups
vnoremap <tab> >gv
vnoremap <s-tab> <gv

" tab and shift-tab to do multiple indents for single line
nnoremap <tab> >>
nnoremap <s-tab> <<

" save current file by double spacebar
nnoremap <space><space> :w<cr>

" map enter to cmd mode
nnoremap <cr> :
vnoremap <cr> :

" map spacebar to leader
map <space> <leader>

" map leader+hh to temporarly turn of highlighting until next search
nnoremap <leader>hh :noh<cr>

" use ? to toggle comments in single line and visual groups
nnoremap <silent> ? :call NERDComment(0,"toggle")<CR>
vnoremap <silent> ? :call NERDComment(0,"toggle")<CR>gv

" map ;; to find <++>, remove it and start insert mod
" inoremap <leader>f<space> <Esc>/<++><Enter>"_c4l
nnoremap <leader>f<space> <Esc>/<++><Enter>"_c4l
nnoremap ;; <Esc>/<++><Enter>"_c4l
inoremap ;; <Esc>/<++><Enter>"_c4l

" map ;p to print()
autocmd FileType python inoremap ;p print()<Enter><++><Esc>k0f(a
autocmd FileType python nnoremap ;p iprint()<Enter><++><Esc>k0f(a

" map ;d to def
autocmd FileType python inoremap ;d def (<++>):<Enter><++><Esc>k0f(i
autocmd FileType python nnoremap ;d idef (<++>):<Enter><++><Esc>k0f(i

" map ;c to class
autocmd FileType python inoremap ;c class (<++>):<Enter><Enter>def __init__(<++>):<Enter><++><Esc>kkk0f(i
autocmd FileType python nnoremap ;c iclass (<++>):<Enter><Enter>def __init__(<++>):<Enter><++><Esc>kkk0f(i

" map ;d to <div>
autocmd FileType html inoremap ;d <div class=''><Enter><++><Enter></div><Esc>kk0f'a
autocmd FileType html nnoremap ;d i<div class=''><Enter><++><Enter></div><Esc>kk0f'a

" map ;p to <p>
autocmd FileType html inoremap ;p <p class=''><Enter><++><Enter></p><Esc>kk0f'a
autocmd FileType html nnoremap ;p i<p class=''><Enter><++><Enter></p><Esc>kk0f'a

" map ;f to function
autocmd FileType javascript inoremap ;f function (<++>) {<Enter><++><Enter>}<Esc>kkof(i
autocmd FileType javascript nnoremap ;f ifunction (<++>) {<Enter><++><Enter>}<Esc>kkof(i
" ------------------------------------------------
